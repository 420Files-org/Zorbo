@using Zorbo.Ares.Packets.Chatroom
@using cb0tProtocol.Packets
@inject IJSRuntime JSRuntime
@inject ChatClient ChatClient
@inject NavigationManager NavigationManager
@implements IDisposable
<div class="d-flex-row-expand chat">
    <div class="d-flex-col w-100 chatscreen" @ref="@ChatElement">
    </div>
    <div class="d-flex writing @WritingCssClass">
        <img src="images/writing.png" alt="Writing" />
        <span>@WritingText</span>
    </div>
</div>
@code {

    ChatInstance _chat;

    [CascadingParameter(Name = "Chat")]
    public ChatInstance Chat {
        get { return _chat; }
        set { OnChatInstanceChanging(_chat, value); }
    }

    string WritingText { get; set; }

    string WritingCssClass { get; set; } = "hidden";


    ElementReference ChatElement { get; set; }
    ChatScreenInterop jsInterop = null;


    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender) {
            jsInterop = new ChatScreenInterop(JSRuntime, ChatElement, NavigationManager);
            jsInterop.InitResize();

            for (int i = 0; i < Chat.Messages.Count; i++)
                jsInterop.InvokeMessage(Chat.Messages[i]);
        }
    }

    private void OnChatInstanceChanging(ChatInstance current, ChatInstance value)
    {
        if (current != value) {
            if (current != null)
                current.PropertyChanged -= ChatPropertyChanged;

            _chat = value;

            if (_chat != null) {
                _chat.PropertyChanged += ChatPropertyChanged;

                if (current != null) {
                    jsInterop.Clear();
                    for (int i = 0; i < _chat.Messages.Count; i++)
                        jsInterop.InvokeMessage(_chat.Messages[i]);
                }
            }
        }
    }

    private void ChatPropertyChanged(object sender, PropertyChangedEventArgs e)
    {
        switch (e.PropertyName) {
            case nameof(ChatInstance.Messages):
                if (Chat.Messages.Count > 0)
                    jsInterop.InvokeMessage(Chat.Messages[Chat.Messages.Count - 1]);
                break;
            case nameof(ChatInstance.UsersWriting):
                string[] users = Chat.UsersWriting.ToArray();
                if (users.Length > 0) {
                    WritingCssClass = null;
                    WritingText = string.Format(
                        "{0} {1} typing a message...",
                        (users.Length <= 4) ? users.Join() : "Lots of people",
                        (users.Length > 1) ? "are" : "is");
                }
                else {
                    WritingCssClass = "hidden";
                    WritingText = null;
                }
                StateHasChanged();
                break;
        }
    }

    public void Dispose()
    {
        Chat.PropertyChanged -= ChatPropertyChanged;
    }
}
