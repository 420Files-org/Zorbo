@inject IJSRuntime JSRuntime
@inject ChatClient ChatClient
@implements IDisposable
<CascadingValue Value="@Chat" Name="Chat">
    <div class="d-flex-col-expand chatroom">
        <div class="d-flex-row-expand chat-container">
            <div class="d-flex-col-expand">
                <div class="d-flex-row topic-area">
                    <Topic Text="@Chat.Topic" />
                </div>
                <ChatScreen />
                <ChatInput />
            </div>
            <Userlist @bind-IsShowing="@Chat.IsShowingUsers" />
        </div>
    </div>
</CascadingValue>
@code {

    ChatInstance _chat;

    [Parameter]
    public ChatInstance Chat {
        get { return _chat; }
        set {
            if (_chat != value) {
                _chat = value;
                OnChatChanged();
            }
        }
    }

    private void OnChatChanged() {
        ChatClient.HeaderText = Chat.Channel.Name;
        Chat.NewMessages = 0;
    }

    protected override async void OnInitialized()
    {
        OnChatChanged();
        if (!Chat.IsConnected) await Chat.ConnectAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender) {
            Chat.PropertyChanged += ChatPropertyChanged;
        }
    }

    private void ChatPropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        switch (e.PropertyName) {
            case nameof(ChatInstance.MyDisplayName):
                if (Chat == ChatClient.ActiveChat) {
                    ChatClient.HeaderText = Chat.Channel.Name;
                    StateHasChanged();
                }
                break;
            case nameof(ChatInstance.Topic):
            case nameof(ChatInstance.IsShowingUsers):
                StateHasChanged();
                break;
        }
    }

    public void Dispose()
    {
        Chat.PropertyChanged -= ChatPropertyChanged;
    }
}
